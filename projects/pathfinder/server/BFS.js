/* * * * * * * * * * * * * * * * * * * 
 *       Breadth First Search        *
 * * * * * * * * * * * * * * * * * * */

/*

Goal: Implement Breadth First Sear algorithm to draw a path
      from any start and end point.
      
high - level strategy:
 1. Create a representation of a grid
    - `0` is passable, `1` is not (i.e. obstacles)
 2. Specify start and end points
 3. (actual start of BFS) Create  queue to handle nodes (visited, not visited)
    - Determine if endpoint is part of visited node set. 
    - nodes get added to the visited set, if they have note bene visited, add to the queue
    - continue through the iteration until the endpoint is found or queue is empty. 
        - if queue becomes empty, and no endpoint, then endpoint is not reachable
 */ 

//  step 1: create a grid, 4 x 4 no obstacles for simplicity
// recall: in js coordinates are flipped from (x,y) to grid[y][x], since arrays process by index
// const grid = [
//     [
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
//         1, 1, 0, 0, 0, 0
//     ],
//     [
//         0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0,
//         0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,
//         0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
//         0, 0, 1, 0, 1, 0
//     ],
//     [
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
//         0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 1
//     ],
//     [
//         0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,
//         0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1,
//         0, 1, 0, 0, 0, 1
//     ],
//     [
//         0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
//         0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0,
//         0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
//         0, 0, 1, 0, 0, 0
//     ],
//     [
//         0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
//         0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0,
//         0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,
//         1, 1, 0, 0, 0, 0
//     ],
//     [
//         0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1,
//         1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0,
//         0, 0, 0, 0, 0, 1
//     ],
//     [
//         0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0,
//         0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,
//         0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,
//         1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,
//         0, 1, 1, 0, 0, 0
//     ],
//     [
//         0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
//         1, 0, 0, 0, 1, 0
//     ],
//     [
//         0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
//         0, 1, 0, 0, 0, 0
//     ],
//     [
//         0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0,
//         1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,
//         0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
//         0, 0, 0, 0, 0, 0
//     ],
//     [
//         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
//         0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,
//         0, 0, 0, 0, 0, 0
//     ],
//     [
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
//         0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0,
//         0, 1, 0, 1, 0, 0
//     ],
//     [
//         0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1,
//         0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,
//         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0
//     ],
//     [
//         1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
//         1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
//         0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
//         0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0,
//         1, 0, 0, 1, 1, 0
//     ],
//     [
//         0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
//         0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,
//         0, 0, 0, 0, 0, 1
//     ],
//     [
//         0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
//         1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,
//         1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
//         0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0,
//         0, 0, 0, 1, 0, 1
//     ],
//     [
//         0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1,
//         0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,
//         0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1,
//         0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,
//         1, 1, 0, 0, 0, 1
//     ],
//     [
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
//         0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0,
//         0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,
//         1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 1, 0
//     ],
//     [
//         0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,
//         0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
//         0, 1, 1, 0, 0, 1
//     ],
//     [
//         0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0,
//         1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0,
//         0, 0, 0, 0, 0, 0
//     ],
//     [
//         0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
//         0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0,
//         0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
//         0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0,
//         0, 0, 0, 0, 0, 0
//     ],
//     [
//         0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
//         0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,
//         0, 0, 0, 0, 0, 0
//     ],
//     [
//         0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
//         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0,
//         1, 0, 0, 1, 1, 0
//     ],
//     [
//         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
//         0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0,
//         0, 0, 1, 0, 0, 0
//     ],
//     [
//         0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0,
//         0, 0, 0, 1, 0, 0
//     ],
//     [
//         0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0,
//         0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1,
//         1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
//         0, 0, 0, 0, 0, 0
//     ],
//     [
//         0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,
//         0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,
//         0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1,
//         0, 0, 0, 0, 0, 0
//     ],
//     [
//         0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0,
//         0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
//         0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0,
//         1, 0, 1, 1, 0, 0
//     ],
//     [
//         0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
//         1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
//         1, 0, 0, 0, 0, 1
//     ],
//     [
//         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
//         0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0
//     ],
//     [
//         0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
//         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
//         0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 1, 0, 0, 1, 0
//     ],
//     [
//         0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
//         1, 1, 0, 0, 0, 0
//     ],
//     [
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0,
//         0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
//         1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1,
//         1, 0, 1, 1, 0, 1
//     ],
//     [
//         0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0,
//         0, 0, 0, 0, 0, 0
//     ],
//     [
//         1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0,
//         0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0,
//         1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0,
//         1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
//         1, 0, 0, 0, 0, 0
//     ],
//     [
//         1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0,
//         0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
//         0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
//         1, 0, 0, 0, 0, 0
//     ],
//     [
//         0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
//         0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
//         0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 1, 0, 0, 0, 0
//     ],
//     [
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
//         0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
//         1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0,
//         0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1,
//         1, 0, 0, 0, 0, 0
//     ],
//     [
//         0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,
//         1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1,
//         0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
//         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 1, 0, 0, 1, 0
//     ],
//     [
//         0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1,
//         0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0,
//         1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
//         1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0,
//         1, 0, 1, 0, 0, 0
//     ],
//     [
//         1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,
//         1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1,
//         0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
//         0, 1, 0, 0, 0, 1
//     ],
//     [
//         0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0,
//         0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
//         0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0,
//         0, 0, 0, 0, 0, 0
//     ],
//     [
//         0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
//         0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0,
//         0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
//         0, 0, 0, 0, 1, 0
//     ],
//     [
//         0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,
//         0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0,
//         0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1,
//         0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,
//         0, 0, 0, 0, 0, 0
//     ],
//     [
//         1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,
//         1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
//         1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1,
//         0, 0, 0, 0, 1, 0
//     ],
//     [
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
//         0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,
//         0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,
//         0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         1, 0, 1, 0, 0, 0
//     ],
//     [
//         1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
//         0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
//         0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0,
//         1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0
//     ],
//     [
//         0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
//         1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,
//         0, 1, 1, 0, 0, 0
//     ],
//     [
//         0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
//         0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,
//         0, 1, 1, 0, 0, 0
//     ]
//     ];

// step 2: define start and end nodes

// const start = { x: 0, y:0};
// const end = { x: 49, y: 49}

// step 3: initialize a queue with the start node as the starting point.
// BFS algorithm implementation

const bfs = (grid, start, end) => {
    // initialize queue
    const queue = [];

    // initialize set for storing nodes that have been visited
    const visited = new Set();

    // track parnet nodes
    const nodeMap = new Map();

    // enqueue the starting node
    queue.push({node: start, steps:0, parent: null});

    // iterate through the nodes in the queue
    while (queue.length > 0) {
        // dequeue a node from the queue
        const { node, steps } = queue.shift();

        // check dequeued node if endpoint
        if (node.x === end.x && node.y === end.y) {
            // reconstruct path
            const path = reconstructPath(nodeMap, start, end);
            
            console.log(`endpoint found! Process took ${steps} steps`);

            console.log("The nodes for the path are:");
            path.forEach(element => console.log(element));
            return path;
        }

        // get neighbors
        const neighbors = getNeighbors(node, grid);
        
        // add new neighbors to the queue iff new for each neighbor of current node
        for (const neighbor of neighbors) {
            const neighborCoord = `(${neighbor.x},${neighbor.y})`;
            

            if (!visited.has(neighborCoord)) {
                visited.add(neighborCoord);

                // set parent node for the neighbor, do not include start point 
                if (!(neighbor.x === start.x && neighbor.y === start.y)){
                    nodeMap.set(neighborCoord, node)
                }
                // enqueue valid neighbor
                queue.push({node: neighbor, steps: steps + 1, parent: node});
            }
        }
    }
}

// helper function getNeighbors

const getNeighbors = (node, grid) => {
    
    const neighbors = [];

    // possible directions from node
    const directions = [
        [-1,0], //up
        [0,1], //right
        [1,0], //down
        [0,-1] //left
    ];

    for (const direction of directions) {
        const updateX = node.x + direction[0];
        const updateY = node.y + direction[1];

        // console.log('Checking neighbors for node:', node);
        // console.log('Current grid value:', grid[node.x][node.y]);
        if (
            // ensure that x and y values are indeed neighbors and within the boundary of the grid
            updateX >= 0 && updateX < grid.length &&
            updateY >= 0 && updateY < grid[0].length &&
            // check if cell is passable
            grid[updateX][updateY] === 0
            ) {
                neighbors.push({x: updateX, y:updateY});
        } 
    }

    return neighbors;
}

// helper function reconstructPath

const reconstructPath = (nodeMap, start, end) => {
    const path = [];
    
    // start from end node, working backwards, using node map
    let current = end;

    while (current !== null && current !== undefined) {
        //  add nodes in the path ar
        path.push(current);
        
        const parent = nodeMap.get(`(${current.x},${current.y})`);
        current = parent;
    }
    path.reverse();

    console.log(path);

    return path;
}

module.exports = bfs;
